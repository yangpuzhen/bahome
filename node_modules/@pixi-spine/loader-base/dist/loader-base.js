/*!
 * @pixi-spine/loader-base - v4.0.4
 * Compiled Thu, 25 May 2023 20:30:12 UTC
 *
 * @pixi-spine/loader-base is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 * 
 * Copyright 2023, Ivan Igorevich Popelyshev <ivan.popelyshev@gmail.com>, All Rights Reserved
 */this.PIXI=this.PIXI||{},this.PIXI.spine=function(h,m,c,n){"use strict";const b={extension:n.ExtensionType.Asset,loader:{extension:{type:n.ExtensionType.LoadParser,priority:c.LoaderParserPriority.Normal},test(e){return c.checkExtension(e,".atlas")},async load(e){return await(await n.settings.ADAPTER.fetch(e)).text()},testParse(e,r){const d=c.checkExtension(r.src,".atlas"),t=typeof e=="string";return Promise.resolve(d&&t)},async parse(e,r,d){const t=r.data;let a=n.utils.path.dirname(r.src);a&&a.lastIndexOf("/")!==a.length-1&&(a+="/");let i=null,o=null;const P=new Promise((p,l)=>{i=p,o=l});let x;const u=p=>{p||o(`Something went terribly wrong loading a spine .atlas file
Most likely your texture failed to load.`),i(x)};if(t.image||t.images){const p=Object.assign(t.image?{default:t.image}:{},t.images);x=new m.TextureAtlas(e,(l,y)=>{const s=p[l]||p.default;s&&s.baseTexture?y(s.baseTexture):y(s)},u)}else x=new m.TextureAtlas(e,f(d,a,t.imageMetadata),u);return await P},unload(e){e.dispose()}}},f=(e,r,d)=>async(t,a)=>{const i=n.utils.path.normalize([...r.split(n.utils.path.sep),t].join(n.utils.path.sep)),o=await e.load({src:i,data:d});a(o.baseTexture)};n.extensions.add(b);function I(e){return e.hasOwnProperty("bones")}function S(e){return e instanceof ArrayBuffer}class D{constructor(){}installLoader(){const r=this,d={extension:n.ExtensionType.Asset,loader:{extension:{type:n.ExtensionType.LoadParser,priority:c.LoaderParserPriority.Normal},test(t){return c.checkExtension(t,".skel")},async load(t){return await(await n.settings.ADAPTER.fetch(t)).arrayBuffer()},testParse(t,a){var i;const o=c.checkExtension(a.src,".json")&&I(t),P=c.checkExtension(a.src,".skel")&&S(t),x=((i=a.data)==null?void 0:i.spineAtlas)===!1;return Promise.resolve(o&&!x||P)},async parse(t,a,i){var o;const P=n.utils.path.extname(a.src).toLowerCase(),x=n.utils.path.basename(a.src,P);let u=n.utils.path.dirname(a.src);u&&u.lastIndexOf("/")!==u.length-1&&(u+="/");const p=c.checkExtension(a.src,".json")&&I(t);let l=null,y=t;p?l=r.createJsonParser():(l=r.createBinaryParser(),y=new Uint8Array(t));const s=a.data||{},T=(o=s==null?void 0:s.spineSkeletonScale)!=null?o:null;T&&(l.scale=T);const g=s.spineAtlas;if(g&&g.pages)return r.parseData(l,g,y);const k=s.atlasRawData;if(k){let E=null,L=null;const j=new Promise((A,F)=>{E=A,L=F}),v=new m.TextureAtlas(k,f(i,u,s.imageMetadata),A=>{A||L(`Something went terribly wrong loading a spine .atlas file
Most likely your texture failed to load.`),E(v)}),X=await j;return r.parseData(l,X,y)}let w=s.spineAtlasFile;w||(w=`${u+x}.atlas`);const O=await i.load({src:w,data:s,alias:s.spineAtlasAlias});return r.parseData(l,O,y)}}};return n.extensions.add(d),d}}return h.SpineLoaderAbstract=D,h.makeSpineTextureAtlasLoaderFunctionFromPixiLoaderObject=f,h}({},PIXI.spine,PIXI,PIXI);
//# sourceMappingURL=loader-base.js.map

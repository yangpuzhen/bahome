/*!
 * @pixi-spine/loader-base - v4.0.4
 * Compiled Thu, 25 May 2023 20:30:12 UTC
 *
 * @pixi-spine/loader-base is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 * 
 * Copyright 2023, Ivan Igorevich Popelyshev <ivan.popelyshev@gmail.com>, All Rights Reserved
 */import{TextureAtlas as h}from"@pixi-spine/base";import{LoaderParserPriority as D,checkExtension as f}from"@pixi/assets";import{ExtensionType as x,settings as S,utils as m,extensions as v}from"@pixi/core";const F={extension:x.Asset,loader:{extension:{type:x.LoadParser,priority:D.Normal},test(t){return f(t,".atlas")},async load(t){return await(await S.ADAPTER.fetch(t)).text()},testParse(t,r){const c=f(r.src,".atlas"),e=typeof t=="string";return Promise.resolve(c&&e)},async parse(t,r,c){const e=r.data;let a=m.path.dirname(r.src);a&&a.lastIndexOf("/")!==a.length-1&&(a+="/");let n=null,i=null;const y=new Promise((u,o)=>{n=u,i=o});let d;const l=u=>{u||i(`Something went terribly wrong loading a spine .atlas file
Most likely your texture failed to load.`),n(d)};if(e.image||e.images){const u=Object.assign(e.image?{default:e.image}:{},e.images);d=new h(t,(o,p)=>{const s=u[o]||u.default;s&&s.baseTexture?p(s.baseTexture):p(s)},l)}else d=new h(t,A(c,a,e.imageMetadata),l);return await y},unload(t){t.dispose()}}},A=(t,r,c)=>async(e,a)=>{const n=m.path.normalize([...r.split(m.path.sep),e].join(m.path.sep)),i=await t.load({src:n,data:c});a(i.baseTexture)};v.add(F);function O(t){return t.hasOwnProperty("bones")}function I(t){return t instanceof ArrayBuffer}class N{constructor(){}installLoader(){const r=this,c={extension:x.Asset,loader:{extension:{type:x.LoadParser,priority:D.Normal},test(e){return f(e,".skel")},async load(e){return await(await S.ADAPTER.fetch(e)).arrayBuffer()},testParse(e,a){var n;const i=f(a.src,".json")&&O(e),y=f(a.src,".skel")&&I(e),d=((n=a.data)==null?void 0:n.spineAtlas)===!1;return Promise.resolve(i&&!d||y)},async parse(e,a,n){var i;const y=m.path.extname(a.src).toLowerCase(),d=m.path.basename(a.src,y);let l=m.path.dirname(a.src);l&&l.lastIndexOf("/")!==l.length-1&&(l+="/");const u=f(a.src,".json")&&O(e);let o=null,p=e;u?o=r.createJsonParser():(o=r.createBinaryParser(),p=new Uint8Array(e));const s=a.data||{},b=(i=s==null?void 0:s.spineSkeletonScale)!=null?i:null;b&&(o.scale=b);const w=s.spineAtlas;if(w&&w.pages)return r.parseData(o,w,p);const T=s.atlasRawData;if(T){let k=null,L=null;const B=new Promise((P,R)=>{k=P,L=R}),E=new h(T,A(n,l,s.imageMetadata),P=>{P||L(`Something went terribly wrong loading a spine .atlas file
Most likely your texture failed to load.`),k(E)}),M=await B;return r.parseData(o,M,p)}let g=s.spineAtlasFile;g||(g=`${l+d}.atlas`);const j=await n.load({src:g,data:s,alias:s.spineAtlasAlias});return r.parseData(o,j,p)}}};return v.add(c),c}}export{N as SpineLoaderAbstract,A as makeSpineTextureAtlasLoaderFunctionFromPixiLoaderObject};
//# sourceMappingURL=loader-base.mjs.map

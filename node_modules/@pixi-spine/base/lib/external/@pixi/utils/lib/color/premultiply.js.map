{"version":3,"file":"premultiply.js","sources":["../../../../../../../../node_modules/@pixi/utils/lib/color/premultiply.mjs"],"sourcesContent":["import { BLEND_MODES } from '@pixi/constants';\n\nfunction mapPremultipliedBlendModes() {\n  const pm = [];\n  const npm = [];\n  for (let i = 0; i < 32; i++) {\n    pm[i] = i;\n    npm[i] = i;\n  }\n  pm[BLEND_MODES.NORMAL_NPM] = BLEND_MODES.NORMAL;\n  pm[BLEND_MODES.ADD_NPM] = BLEND_MODES.ADD;\n  pm[BLEND_MODES.SCREEN_NPM] = BLEND_MODES.SCREEN;\n  npm[BLEND_MODES.NORMAL] = BLEND_MODES.NORMAL_NPM;\n  npm[BLEND_MODES.ADD] = BLEND_MODES.ADD_NPM;\n  npm[BLEND_MODES.SCREEN] = BLEND_MODES.SCREEN_NPM;\n  const array = [];\n  array.push(npm);\n  array.push(pm);\n  return array;\n}\nconst premultiplyBlendMode = mapPremultipliedBlendModes();\nfunction correctBlendMode(blendMode, premultiplied) {\n  return premultiplyBlendMode[premultiplied ? 1 : 0][blendMode];\n}\nfunction premultiplyRgba(rgb, alpha, out, premultiply) {\n  out = out || new Float32Array(4);\n  if (premultiply || premultiply === void 0) {\n    out[0] = rgb[0] * alpha;\n    out[1] = rgb[1] * alpha;\n    out[2] = rgb[2] * alpha;\n  } else {\n    out[0] = rgb[0];\n    out[1] = rgb[1];\n    out[2] = rgb[2];\n  }\n  out[3] = alpha;\n  return out;\n}\nfunction premultiplyTint(tint, alpha) {\n  if (alpha === 1) {\n    return (alpha * 255 << 24) + tint;\n  }\n  if (alpha === 0) {\n    return 0;\n  }\n  let R = tint >> 16 & 255;\n  let G = tint >> 8 & 255;\n  let B = tint & 255;\n  R = R * alpha + 0.5 | 0;\n  G = G * alpha + 0.5 | 0;\n  B = B * alpha + 0.5 | 0;\n  return (alpha * 255 << 24) + (R << 16) + (G << 8) + B;\n}\nfunction premultiplyTintToRgba(tint, alpha, out, premultiply) {\n  out = out || new Float32Array(4);\n  out[0] = (tint >> 16 & 255) / 255;\n  out[1] = (tint >> 8 & 255) / 255;\n  out[2] = (tint & 255) / 255;\n  if (premultiply || premultiply === void 0) {\n    out[0] *= alpha;\n    out[1] *= alpha;\n    out[2] *= alpha;\n  }\n  out[3] = alpha;\n  return out;\n}\n\nexport { correctBlendMode, premultiplyBlendMode, premultiplyRgba, premultiplyTint, premultiplyTintToRgba };\n//# sourceMappingURL=premultiply.mjs.map\n"],"names":["BLEND_MODES"],"mappings":";;;;AAEA,SAAS,0BAA0B,GAAG;AACtC,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;AAChB,EAAE,MAAM,GAAG,GAAG,EAAE,CAAC;AACjB,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;AAC/B,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACd,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACf,GAAG;AACH,EAAE,EAAE,CAACA,iBAAW,CAAC,UAAU,CAAC,GAAGA,iBAAW,CAAC,MAAM,CAAC;AAClD,EAAE,EAAE,CAACA,iBAAW,CAAC,OAAO,CAAC,GAAGA,iBAAW,CAAC,GAAG,CAAC;AAC5C,EAAE,EAAE,CAACA,iBAAW,CAAC,UAAU,CAAC,GAAGA,iBAAW,CAAC,MAAM,CAAC;AAClD,EAAE,GAAG,CAACA,iBAAW,CAAC,MAAM,CAAC,GAAGA,iBAAW,CAAC,UAAU,CAAC;AACnD,EAAE,GAAG,CAACA,iBAAW,CAAC,GAAG,CAAC,GAAGA,iBAAW,CAAC,OAAO,CAAC;AAC7C,EAAE,GAAG,CAACA,iBAAW,CAAC,MAAM,CAAC,GAAGA,iBAAW,CAAC,UAAU,CAAC;AACnD,EAAE,MAAM,KAAK,GAAG,EAAE,CAAC;AACnB,EAAE,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAClB,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACjB,EAAE,OAAO,KAAK,CAAC;AACf,CAAC;AAC4B,0BAA0B;;"}
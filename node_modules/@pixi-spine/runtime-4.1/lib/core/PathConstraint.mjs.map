{"version":3,"file":"PathConstraint.mjs","sources":["../../src/core/PathConstraint.ts"],"sourcesContent":["import { PathAttachment } from './attachments';\nimport type { Updatable } from './Updatable';\nimport { PathConstraintData, SpacingMode } from './PathConstraintData';\nimport type { Bone } from './Bone';\nimport type { Slot } from './Slot';\nimport type { Skeleton } from './Skeleton';\nimport { MathUtils, PositionMode, RotateMode, Utils } from '@pixi-spine/base';\n/** Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the\n * constrained bones so they follow a {@link PathAttachment}.\n *\n * See [Path constraints](http://esotericsoftware.com/spine-path-constraints) in the Spine User Guide.\n * @public\n * */\nexport class PathConstraint implements Updatable {\n    static NONE = -1;\n    static BEFORE = -2;\n    static AFTER = -3;\n    static epsilon = 0.00001;\n\n    /** The path constraint's setup pose data. */\n    data: PathConstraintData;\n\n    /** The bones that will be modified by this path constraint. */\n    bones: Array<Bone>;\n\n    /** The slot whose path attachment will be used to constrained the bones. */\n    target: Slot;\n\n    /** The position along the path. */\n    position = 0;\n\n    /** The spacing between bones. */\n    spacing = 0;\n\n    mixRotate = 0;\n\n    mixX = 0;\n\n    mixY = 0;\n\n    spaces = new Array<number>();\n    positions = new Array<number>();\n    world = new Array<number>();\n    curves = new Array<number>();\n    lengths = new Array<number>();\n    segments = new Array<number>();\n\n    active = false;\n\n    constructor(data: PathConstraintData, skeleton: Skeleton) {\n        if (!data) throw new Error('data cannot be null.');\n        if (!skeleton) throw new Error('skeleton cannot be null.');\n        this.data = data;\n        this.bones = new Array<Bone>();\n        for (let i = 0, n = data.bones.length; i < n; i++) {\n            const bone = skeleton.findBone(data.bones[i].name);\n\n            if (!bone) throw new Error(`Couldn't find bone ${data.bones[i].name}.`);\n            this.bones.push(bone);\n        }\n        const target = skeleton.findSlot(data.target.name);\n\n        if (!target) throw new Error(`Couldn't find target bone ${data.target.name}`);\n        this.target = target;\n        this.position = data.position;\n        this.spacing = data.spacing;\n        this.mixRotate = data.mixRotate;\n        this.mixX = data.mixX;\n        this.mixY = data.mixY;\n    }\n\n    isActive() {\n        return this.active;\n    }\n\n    update() {\n        const attachment = this.target.getAttachment();\n\n        if (!(attachment instanceof PathAttachment)) return;\n\n        const mixRotate = this.mixRotate;\n        const mixX = this.mixX;\n        const mixY = this.mixY;\n\n        if (mixRotate == 0 && mixX == 0 && mixY == 0) return;\n\n        const data = this.data;\n        const tangents = data.rotateMode == RotateMode.Tangent;\n        const scale = data.rotateMode == RotateMode.ChainScale;\n\n        const bones = this.bones;\n        const boneCount = bones.length;\n        const spacesCount = tangents ? boneCount : boneCount + 1;\n        const spaces = Utils.setArraySize(this.spaces, spacesCount);\n        const lengths: Array<number> = scale ? (this.lengths = Utils.setArraySize(this.lengths, boneCount)) : [];\n        const spacing = this.spacing;\n\n        switch (data.spacingMode) {\n            case SpacingMode.Percent:\n                if (scale) {\n                    for (let i = 0, n = spacesCount - 1; i < n; i++) {\n                        const bone = bones[i];\n                        const setupLength = bone.data.length;\n\n                        if (setupLength < PathConstraint.epsilon) lengths[i] = 0;\n                        else {\n                            const x = setupLength * bone.matrix.a;\n                            const y = setupLength * bone.matrix.b;\n\n                            lengths[i] = Math.sqrt(x * x + y * y);\n                        }\n                    }\n                }\n                Utils.arrayFill(spaces, 1, spacesCount, spacing);\n                break;\n            case SpacingMode.Proportional:\n                let sum = 0;\n\n                for (let i = 0, n = spacesCount - 1; i < n; ) {\n                    const bone = bones[i];\n                    const setupLength = bone.data.length;\n\n                    if (setupLength < PathConstraint.epsilon) {\n                        if (scale) lengths[i] = 0;\n                        spaces[++i] = spacing;\n                    } else {\n                        const x = setupLength * bone.matrix.a;\n                        const y = setupLength * bone.matrix.b;\n                        const length = Math.sqrt(x * x + y * y);\n\n                        if (scale) lengths[i] = length;\n                        spaces[++i] = length;\n                        sum += length;\n                    }\n                }\n                if (sum > 0) {\n                    sum = (spacesCount / sum) * spacing;\n                    for (let i = 1; i < spacesCount; i++) spaces[i] *= sum;\n                }\n                break;\n            default:\n                const lengthSpacing = data.spacingMode == SpacingMode.Length;\n\n                for (let i = 0, n = spacesCount - 1; i < n; ) {\n                    const bone = bones[i];\n                    const setupLength = bone.data.length;\n\n                    if (setupLength < PathConstraint.epsilon) {\n                        if (scale) lengths[i] = 0;\n                        spaces[++i] = spacing;\n                    } else {\n                        const x = setupLength * bone.matrix.a;\n                        const y = setupLength * bone.matrix.b;\n                        const length = Math.sqrt(x * x + y * y);\n\n                        if (scale) lengths[i] = length;\n                        spaces[++i] = ((lengthSpacing ? setupLength + spacing : spacing) * length) / setupLength;\n                    }\n                }\n        }\n\n        const positions = this.computeWorldPositions(<PathAttachment>attachment, spacesCount, tangents);\n        let boneX = positions[0];\n        let boneY = positions[1];\n        let offsetRotation = data.offsetRotation;\n        let tip = false;\n\n        if (offsetRotation == 0) tip = data.rotateMode == RotateMode.Chain;\n        else {\n            tip = false;\n            const p = this.target.bone.matrix;\n\n            offsetRotation *= p.a * p.d - p.b * p.c > 0 ? MathUtils.degRad : -MathUtils.degRad;\n        }\n        for (let i = 0, p = 3; i < boneCount; i++, p += 3) {\n            const bone = bones[i];\n            const mat = bone.matrix;\n\n            mat.tx += (boneX - mat.tx) * mixX;\n            mat.ty += (boneY - mat.ty) * mixY;\n            const x = positions[p];\n            const y = positions[p + 1];\n            const dx = x - boneX;\n            const dy = y - boneY;\n\n            if (scale) {\n                const length = lengths[i];\n\n                if (length != 0) {\n                    const s = (Math.sqrt(dx * dx + dy * dy) / length - 1) * mixRotate + 1;\n\n                    mat.a *= s;\n                    mat.b *= s;\n                }\n            }\n            boneX = x;\n            boneY = y;\n            if (mixRotate > 0) {\n                const a = mat.a;\n                const b = mat.c;\n                const c = mat.b;\n                const d = mat.d;\n                let r = 0;\n                let cos = 0;\n                let sin = 0;\n\n                if (tangents) r = positions[p - 1];\n                else if (spaces[i + 1] == 0) r = positions[p + 2];\n                else r = Math.atan2(dy, dx);\n                r -= Math.atan2(c, a);\n                if (tip) {\n                    cos = Math.cos(r);\n                    sin = Math.sin(r);\n                    const length = bone.data.length;\n\n                    boneX += (length * (cos * a - sin * c) - dx) * mixRotate;\n                    boneY += (length * (sin * a + cos * c) - dy) * mixRotate;\n                } else {\n                    r += offsetRotation;\n                }\n                if (r > MathUtils.PI) r -= MathUtils.PI2;\n                else if (r < -MathUtils.PI)\n                    //\n                    r += MathUtils.PI2;\n                r *= mixRotate;\n                cos = Math.cos(r);\n                sin = Math.sin(r);\n                mat.a = cos * a - sin * c;\n                mat.c = cos * b - sin * d;\n                mat.b = sin * a + cos * c;\n                mat.d = sin * b + cos * d;\n            }\n            bone.updateAppliedTransform();\n        }\n    }\n\n    computeWorldPositions(path: PathAttachment, spacesCount: number, tangents: boolean) {\n        const target = this.target;\n        let position = this.position;\n        const spaces = this.spaces;\n        const out = Utils.setArraySize(this.positions, spacesCount * 3 + 2);\n        let world: Array<number> = this.world;\n        const closed = path.closed;\n        let verticesLength = path.worldVerticesLength;\n        let curveCount = verticesLength / 6;\n        let prevCurve = PathConstraint.NONE;\n\n        if (!path.constantSpeed) {\n            const lengths = path.lengths;\n\n            curveCount -= closed ? 1 : 2;\n            const pathLength = lengths[curveCount];\n\n            if (this.data.positionMode == PositionMode.Percent) position *= pathLength;\n\n            let multiplier;\n\n            switch (this.data.spacingMode) {\n                case SpacingMode.Percent:\n                    multiplier = pathLength;\n                    break;\n                case SpacingMode.Proportional:\n                    multiplier = pathLength / spacesCount;\n                    break;\n                default:\n                    multiplier = 1;\n            }\n            world = Utils.setArraySize(this.world, 8);\n            for (let i = 0, o = 0, curve = 0; i < spacesCount; i++, o += 3) {\n                const space = spaces[i] * multiplier;\n\n                position += space;\n                let p = position;\n\n                if (closed) {\n                    p %= pathLength;\n                    if (p < 0) p += pathLength;\n                    curve = 0;\n                } else if (p < 0) {\n                    if (prevCurve != PathConstraint.BEFORE) {\n                        prevCurve = PathConstraint.BEFORE;\n                        path.computeWorldVertices(target, 2, 4, world, 0, 2);\n                    }\n                    this.addBeforePosition(p, world, 0, out, o);\n                    continue;\n                } else if (p > pathLength) {\n                    if (prevCurve != PathConstraint.AFTER) {\n                        prevCurve = PathConstraint.AFTER;\n                        path.computeWorldVertices(target, verticesLength - 6, 4, world, 0, 2);\n                    }\n                    this.addAfterPosition(p - pathLength, world, 0, out, o);\n                    continue;\n                }\n\n                // Determine curve containing position.\n                for (; ; curve++) {\n                    const length = lengths[curve];\n\n                    if (p > length) continue;\n                    if (curve == 0) p /= length;\n                    else {\n                        const prev = lengths[curve - 1];\n\n                        p = (p - prev) / (length - prev);\n                    }\n                    break;\n                }\n                if (curve != prevCurve) {\n                    prevCurve = curve;\n                    if (closed && curve == curveCount) {\n                        path.computeWorldVertices(target, verticesLength - 4, 4, world, 0, 2);\n                        path.computeWorldVertices(target, 0, 4, world, 4, 2);\n                    } else path.computeWorldVertices(target, curve * 6 + 2, 8, world, 0, 2);\n                }\n                this.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o, tangents || (i > 0 && space == 0));\n            }\n\n            return out;\n        }\n\n        // World vertices.\n        if (closed) {\n            verticesLength += 2;\n            world = Utils.setArraySize(this.world, verticesLength);\n            path.computeWorldVertices(target, 2, verticesLength - 4, world, 0, 2);\n            path.computeWorldVertices(target, 0, 2, world, verticesLength - 4, 2);\n            world[verticesLength - 2] = world[0];\n            world[verticesLength - 1] = world[1];\n        } else {\n            curveCount--;\n            verticesLength -= 4;\n            world = Utils.setArraySize(this.world, verticesLength);\n            path.computeWorldVertices(target, 2, verticesLength, world, 0, 2);\n        }\n\n        // Curve lengths.\n        const curves = Utils.setArraySize(this.curves, curveCount);\n        let pathLength = 0;\n        let x1 = world[0];\n        let y1 = world[1];\n        let cx1 = 0;\n        let cy1 = 0;\n        let cx2 = 0;\n        let cy2 = 0;\n        let x2 = 0;\n        let y2 = 0;\n        let tmpx = 0;\n        let tmpy = 0;\n        let dddfx = 0;\n        let dddfy = 0;\n        let ddfx = 0;\n        let ddfy = 0;\n        let dfx = 0;\n        let dfy = 0;\n\n        for (let i = 0, w = 2; i < curveCount; i++, w += 6) {\n            cx1 = world[w];\n            cy1 = world[w + 1];\n            cx2 = world[w + 2];\n            cy2 = world[w + 3];\n            x2 = world[w + 4];\n            y2 = world[w + 5];\n            tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;\n            tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;\n            dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;\n            dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;\n            ddfx = tmpx * 2 + dddfx;\n            ddfy = tmpy * 2 + dddfy;\n            dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;\n            dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n            dfx += ddfx;\n            dfy += ddfy;\n            ddfx += dddfx;\n            ddfy += dddfy;\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n            dfx += ddfx;\n            dfy += ddfy;\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n            dfx += ddfx + dddfx;\n            dfy += ddfy + dddfy;\n            pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n            curves[i] = pathLength;\n            x1 = x2;\n            y1 = y2;\n        }\n\n        if (this.data.positionMode == PositionMode.Percent) position *= pathLength;\n\n        let multiplier;\n\n        switch (this.data.spacingMode) {\n            case SpacingMode.Percent:\n                multiplier = pathLength;\n                break;\n            case SpacingMode.Proportional:\n                multiplier = pathLength / spacesCount;\n                break;\n            default:\n                multiplier = 1;\n        }\n\n        const segments = this.segments;\n        let curveLength = 0;\n\n        for (let i = 0, o = 0, curve = 0, segment = 0; i < spacesCount; i++, o += 3) {\n            const space = spaces[i] * multiplier;\n\n            position += space;\n            let p = position;\n\n            if (closed) {\n                p %= pathLength;\n                if (p < 0) p += pathLength;\n                curve = 0;\n            } else if (p < 0) {\n                this.addBeforePosition(p, world, 0, out, o);\n                continue;\n            } else if (p > pathLength) {\n                this.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);\n                continue;\n            }\n\n            // Determine curve containing position.\n            for (; ; curve++) {\n                const length = curves[curve];\n\n                if (p > length) continue;\n                if (curve == 0) p /= length;\n                else {\n                    const prev = curves[curve - 1];\n\n                    p = (p - prev) / (length - prev);\n                }\n                break;\n            }\n\n            // Curve segment lengths.\n            if (curve != prevCurve) {\n                prevCurve = curve;\n                let ii = curve * 6;\n\n                x1 = world[ii];\n                y1 = world[ii + 1];\n                cx1 = world[ii + 2];\n                cy1 = world[ii + 3];\n                cx2 = world[ii + 4];\n                cy2 = world[ii + 5];\n                x2 = world[ii + 6];\n                y2 = world[ii + 7];\n                tmpx = (x1 - cx1 * 2 + cx2) * 0.03;\n                tmpy = (y1 - cy1 * 2 + cy2) * 0.03;\n                dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;\n                dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;\n                ddfx = tmpx * 2 + dddfx;\n                ddfy = tmpy * 2 + dddfy;\n                dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;\n                dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;\n                curveLength = Math.sqrt(dfx * dfx + dfy * dfy);\n                segments[0] = curveLength;\n                for (ii = 1; ii < 8; ii++) {\n                    dfx += ddfx;\n                    dfy += ddfy;\n                    ddfx += dddfx;\n                    ddfy += dddfy;\n                    curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                    segments[ii] = curveLength;\n                }\n                dfx += ddfx;\n                dfy += ddfy;\n                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                segments[8] = curveLength;\n                dfx += ddfx + dddfx;\n                dfy += ddfy + dddfy;\n                curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n                segments[9] = curveLength;\n                segment = 0;\n            }\n\n            // Weight by segment length.\n            p *= curveLength;\n            for (; ; segment++) {\n                const length = segments[segment];\n\n                if (p > length) continue;\n                if (segment == 0) p /= length;\n                else {\n                    const prev = segments[segment - 1];\n\n                    p = segment + (p - prev) / (length - prev);\n                }\n                break;\n            }\n            this.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || (i > 0 && space == 0));\n        }\n\n        return out;\n    }\n\n    addBeforePosition(p: number, temp: Array<number>, i: number, out: Array<number>, o: number) {\n        const x1 = temp[i];\n        const y1 = temp[i + 1];\n        const dx = temp[i + 2] - x1;\n        const dy = temp[i + 3] - y1;\n        const r = Math.atan2(dy, dx);\n\n        out[o] = x1 + p * Math.cos(r);\n        out[o + 1] = y1 + p * Math.sin(r);\n        out[o + 2] = r;\n    }\n\n    addAfterPosition(p: number, temp: Array<number>, i: number, out: Array<number>, o: number) {\n        const x1 = temp[i + 2];\n        const y1 = temp[i + 3];\n        const dx = x1 - temp[i];\n        const dy = y1 - temp[i + 1];\n        const r = Math.atan2(dy, dx);\n\n        out[o] = x1 + p * Math.cos(r);\n        out[o + 1] = y1 + p * Math.sin(r);\n        out[o + 2] = r;\n    }\n\n    addCurvePosition(\n        p: number,\n        x1: number,\n        y1: number,\n        cx1: number,\n        cy1: number,\n        cx2: number,\n        cy2: number,\n        x2: number,\n        y2: number,\n        out: Array<number>,\n        o: number,\n        tangents: boolean\n    ) {\n        if (p == 0 || isNaN(p)) {\n            out[o] = x1;\n            out[o + 1] = y1;\n            out[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\n\n            return;\n        }\n        const tt = p * p;\n        const ttt = tt * p;\n        const u = 1 - p;\n        const uu = u * u;\n        const uuu = uu * u;\n        const ut = u * p;\n        const ut3 = ut * 3;\n        const uut3 = u * ut3;\n        const utt3 = ut3 * p;\n        const x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt;\n        const y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;\n\n        out[o] = x;\n        out[o + 1] = y;\n        if (tangents) {\n            if (p < 0.001) out[o + 2] = Math.atan2(cy1 - y1, cx1 - x1);\n            else out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));\n        }\n    }\n}\n"],"names":["pathLength","multiplier"],"mappings":"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"}
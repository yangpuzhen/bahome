{"version":3,"file":"SpineBase.mjs","sources":["../../../../../base/lib/SpineBase.mjs"],"sourcesContent":["import { AttachmentType } from './core/AttachmentType.mjs';\nimport { TextureRegion } from './core/TextureRegion.mjs';\nimport { MathUtils } from './core/Utils.mjs';\nimport { DRAW_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { Sprite } from '@pixi/sprite';\nimport { SimpleMesh } from '@pixi/mesh-extras';\nimport { Graphics } from '@pixi/graphics';\nimport { Transform, Polygon } from '@pixi/math';\nimport { rgb2hex, hex2rgb } from '@pixi/utils';\nimport { settings } from './settings.mjs';\n\nconst tempRgb = [0, 0, 0];\nclass SpineSprite extends Sprite {\n  constructor() {\n    super(...arguments);\n    this.region = null;\n    this.attachment = null;\n  }\n}\nclass SpineMesh extends SimpleMesh {\n  constructor(texture, vertices, uvs, indices, drawMode) {\n    super(texture, vertices, uvs, indices, drawMode);\n    this.region = null;\n    this.attachment = null;\n  }\n}\nconst _SpineBase = class extends Container {\n  constructor(spineData) {\n    super();\n    if (!spineData) {\n      throw new Error(\"The spineData param is required.\");\n    }\n    if (typeof spineData === \"string\") {\n      throw new Error('spineData param cant be string. Please use spine.Spine.fromAtlas(\"YOUR_RESOURCE_NAME\") from now on.');\n    }\n    this.spineData = spineData;\n    this.createSkeleton(spineData);\n    this.slotContainers = [];\n    this.tempClipContainers = [];\n    for (let i = 0, n = this.skeleton.slots.length; i < n; i++) {\n      const slot = this.skeleton.slots[i];\n      const attachment = slot.getAttachment();\n      const slotContainer = this.newContainer();\n      this.slotContainers.push(slotContainer);\n      this.addChild(slotContainer);\n      this.tempClipContainers.push(null);\n      if (!attachment) {\n        continue;\n      }\n      if (attachment.type === AttachmentType.Region) {\n        const spriteName = attachment.name;\n        const sprite = this.createSprite(slot, attachment, spriteName);\n        slot.currentSprite = sprite;\n        slot.currentSpriteName = spriteName;\n        slotContainer.addChild(sprite);\n      } else if (attachment.type === AttachmentType.Mesh) {\n        const mesh = this.createMesh(slot, attachment);\n        slot.currentMesh = mesh;\n        slot.currentMeshId = attachment.id;\n        slot.currentMeshName = attachment.name;\n        slotContainer.addChild(mesh);\n      } else if (attachment.type === AttachmentType.Clipping) {\n        this.createGraphics(slot, attachment);\n        slotContainer.addChild(slot.clippingContainer);\n        slotContainer.addChild(slot.currentGraphics);\n      }\n    }\n    this.tintRgb = new Float32Array([1, 1, 1]);\n    this.autoUpdate = true;\n    this.visible = true;\n  }\n  get debug() {\n    return this._debug;\n  }\n  set debug(value) {\n    if (value == this._debug) {\n      return;\n    }\n    this._debug?.unregisterSpine(this);\n    value?.registerSpine(this);\n    this._debug = value;\n  }\n  /**\n   * If this flag is set to true, the spine animation will be automatically updated every\n   * time the object id drawn. The down side of this approach is that the delta time is\n   * automatically calculated and you could miss out on cool effects like slow motion,\n   * pause, skip ahead and the sorts. Most of these effects can be achieved even with\n   * autoUpdate enabled but are harder to achieve.\n   *\n   * @member {boolean}\n   * @memberof spine.Spine#\n   * @default true\n   */\n  get autoUpdate() {\n    return this._autoUpdate;\n  }\n  set autoUpdate(value) {\n    if (value !== this._autoUpdate) {\n      this._autoUpdate = value;\n      this.updateTransform = value ? _SpineBase.prototype.autoUpdateTransform : Container.prototype.updateTransform;\n    }\n  }\n  /**\n   * The tint applied to the spine object. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n   *\n   * @member {number}\n   * @memberof spine.Spine#\n   * @default 0xFFFFFF\n   */\n  get tint() {\n    return rgb2hex(this.tintRgb);\n  }\n  set tint(value) {\n    this.tintRgb = hex2rgb(value, this.tintRgb);\n  }\n  /**\n   * Limit value for the update dt with Spine.globalDelayLimit\n   * that can be overridden with localDelayLimit\n   * @return {number} - Maximum processed dt value for the update\n   */\n  get delayLimit() {\n    const limit = typeof this.localDelayLimit !== \"undefined\" ? this.localDelayLimit : settings.GLOBAL_DELAY_LIMIT;\n    return limit || Number.MAX_VALUE;\n  }\n  /**\n   * Update the spine skeleton and its animations by delta time (dt)\n   *\n   * @param dt {number} Delta time. Time by which the animation should be updated\n   */\n  update(dt) {\n    const delayLimit = this.delayLimit;\n    if (dt > delayLimit)\n      dt = delayLimit;\n    this.state.update(dt);\n    this.state.apply(this.skeleton);\n    if (!this.skeleton) {\n      return;\n    }\n    this.skeleton.updateWorldTransform();\n    const slots = this.skeleton.slots;\n    const globalClr = this.color;\n    let light = null;\n    let dark = null;\n    if (globalClr) {\n      light = globalClr.light;\n      dark = globalClr.dark;\n    } else {\n      light = this.tintRgb;\n    }\n    for (let i = 0, n = slots.length; i < n; i++) {\n      const slot = slots[i];\n      const attachment = slot.getAttachment();\n      const slotContainer = this.slotContainers[i];\n      if (!attachment) {\n        slotContainer.visible = false;\n        continue;\n      }\n      let spriteColor = null;\n      if (attachment.sequence) {\n        attachment.sequence.apply(slot, attachment);\n      }\n      let region = attachment.region;\n      const attColor = attachment.color;\n      switch (attachment != null && attachment.type) {\n        case AttachmentType.Region:\n          const transform = slotContainer.transform;\n          transform.setFromMatrix(slot.bone.matrix);\n          region = attachment.region;\n          if (slot.currentMesh) {\n            slot.currentMesh.visible = false;\n            slot.currentMesh = null;\n            slot.currentMeshId = void 0;\n            slot.currentMeshName = void 0;\n          }\n          if (!region) {\n            if (slot.currentSprite) {\n              slot.currentSprite.renderable = false;\n            }\n            break;\n          }\n          if (!slot.currentSpriteName || slot.currentSpriteName !== attachment.name) {\n            const spriteName = attachment.name;\n            if (slot.currentSprite) {\n              slot.currentSprite.visible = false;\n            }\n            slot.sprites = slot.sprites || {};\n            if (slot.sprites[spriteName] !== void 0) {\n              slot.sprites[spriteName].visible = true;\n            } else {\n              const sprite = this.createSprite(slot, attachment, spriteName);\n              slotContainer.addChild(sprite);\n            }\n            slot.currentSprite = slot.sprites[spriteName];\n            slot.currentSpriteName = spriteName;\n          }\n          slot.currentSprite.renderable = true;\n          if (!slot.hackRegion) {\n            this.setSpriteRegion(attachment, slot.currentSprite, region);\n          }\n          if (slot.currentSprite.color) {\n            spriteColor = slot.currentSprite.color;\n          } else {\n            tempRgb[0] = light[0] * slot.color.r * attColor.r;\n            tempRgb[1] = light[1] * slot.color.g * attColor.g;\n            tempRgb[2] = light[2] * slot.color.b * attColor.b;\n            slot.currentSprite.tint = rgb2hex(tempRgb);\n          }\n          slot.currentSprite.blendMode = slot.blendMode;\n          break;\n        case AttachmentType.Mesh:\n          if (slot.currentSprite) {\n            slot.currentSprite.visible = false;\n            slot.currentSprite = null;\n            slot.currentSpriteName = void 0;\n            const transform2 = new Transform();\n            transform2._parentID = -1;\n            transform2._worldID = slotContainer.transform._worldID;\n            slotContainer.transform = transform2;\n          }\n          if (!region) {\n            if (slot.currentMesh) {\n              slot.currentMesh.renderable = false;\n            }\n            break;\n          }\n          const id = attachment.id;\n          if (slot.currentMeshId === void 0 || slot.currentMeshId !== id) {\n            const meshId = id;\n            if (slot.currentMesh) {\n              slot.currentMesh.visible = false;\n            }\n            slot.meshes = slot.meshes || {};\n            if (slot.meshes[meshId] !== void 0) {\n              slot.meshes[meshId].visible = true;\n            } else {\n              const mesh = this.createMesh(slot, attachment);\n              slotContainer.addChild(mesh);\n            }\n            slot.currentMesh = slot.meshes[meshId];\n            slot.currentMeshName = attachment.name;\n            slot.currentMeshId = meshId;\n          }\n          slot.currentMesh.renderable = true;\n          attachment.computeWorldVerticesOld(slot, slot.currentMesh.vertices);\n          if (slot.currentMesh.color) {\n            spriteColor = slot.currentMesh.color;\n          } else {\n            tempRgb[0] = light[0] * slot.color.r * attColor.r;\n            tempRgb[1] = light[1] * slot.color.g * attColor.g;\n            tempRgb[2] = light[2] * slot.color.b * attColor.b;\n            slot.currentMesh.tint = rgb2hex(tempRgb);\n          }\n          slot.currentMesh.blendMode = slot.blendMode;\n          if (!slot.hackRegion) {\n            this.setMeshRegion(attachment, slot.currentMesh, region);\n          }\n          break;\n        case AttachmentType.Clipping:\n          if (!slot.currentGraphics) {\n            this.createGraphics(slot, attachment);\n            slotContainer.addChild(slot.clippingContainer);\n            slotContainer.addChild(slot.currentGraphics);\n          }\n          this.updateGraphics(slot, attachment);\n          slotContainer.alpha = 1;\n          slotContainer.visible = true;\n          continue;\n        default:\n          slotContainer.visible = false;\n          continue;\n      }\n      slotContainer.visible = true;\n      if (spriteColor) {\n        let r0 = slot.color.r * attColor.r;\n        let g0 = slot.color.g * attColor.g;\n        let b0 = slot.color.b * attColor.b;\n        spriteColor.setLight(light[0] * r0 + dark[0] * (1 - r0), light[1] * g0 + dark[1] * (1 - g0), light[2] * b0 + dark[2] * (1 - b0));\n        if (slot.darkColor) {\n          r0 = slot.darkColor.r;\n          g0 = slot.darkColor.g;\n          b0 = slot.darkColor.b;\n        } else {\n          r0 = 0;\n          g0 = 0;\n          b0 = 0;\n        }\n        spriteColor.setDark(light[0] * r0 + dark[0] * (1 - r0), light[1] * g0 + dark[1] * (1 - g0), light[2] * b0 + dark[2] * (1 - b0));\n      }\n      slotContainer.alpha = slot.color.a;\n    }\n    const drawOrder = this.skeleton.drawOrder;\n    let clippingAttachment = null;\n    let clippingContainer = null;\n    for (let i = 0, n = drawOrder.length; i < n; i++) {\n      const slot = slots[drawOrder[i].data.index];\n      const slotContainer = this.slotContainers[drawOrder[i].data.index];\n      if (!clippingContainer) {\n        if (slotContainer.parent !== null && slotContainer.parent !== this) {\n          slotContainer.parent.removeChild(slotContainer);\n          slotContainer.parent = this;\n        }\n      }\n      if (slot.currentGraphics && slot.getAttachment()) {\n        clippingContainer = slot.clippingContainer;\n        clippingAttachment = slot.getAttachment();\n        clippingContainer.children.length = 0;\n        this.children[i] = slotContainer;\n        if (clippingAttachment.endSlot === slot.data) {\n          clippingAttachment.endSlot = null;\n        }\n      } else if (clippingContainer) {\n        let c = this.tempClipContainers[i];\n        if (!c) {\n          c = this.tempClipContainers[i] = this.newContainer();\n          c.visible = false;\n        }\n        this.children[i] = c;\n        slotContainer.parent = null;\n        clippingContainer.addChild(slotContainer);\n        if (clippingAttachment.endSlot == slot.data) {\n          clippingContainer.renderable = true;\n          clippingContainer = null;\n          clippingAttachment = null;\n        }\n      } else {\n        this.children[i] = slotContainer;\n      }\n    }\n    this._debug?.renderDebug(this);\n  }\n  setSpriteRegion(attachment, sprite, region) {\n    if (sprite.attachment === attachment && sprite.region === region) {\n      return;\n    }\n    sprite.region = region;\n    sprite.attachment = attachment;\n    sprite.texture = region.texture;\n    sprite.rotation = attachment.rotation * MathUtils.degRad;\n    sprite.position.x = attachment.x;\n    sprite.position.y = attachment.y;\n    sprite.alpha = attachment.color.a;\n    if (!region.size) {\n      sprite.scale.x = attachment.scaleX * attachment.width / region.originalWidth;\n      sprite.scale.y = -attachment.scaleY * attachment.height / region.originalHeight;\n    } else {\n      sprite.scale.x = region.size.width / region.originalWidth;\n      sprite.scale.y = -region.size.height / region.originalHeight;\n    }\n  }\n  setMeshRegion(attachment, mesh, region) {\n    if (mesh.attachment === attachment && mesh.region === region) {\n      return;\n    }\n    mesh.region = region;\n    mesh.attachment = attachment;\n    mesh.texture = region.texture;\n    region.texture.updateUvs();\n    mesh.uvBuffer.update(attachment.regionUVs);\n  }\n  /**\n   * When autoupdate is set to yes this function is used as pixi's updateTransform function\n   *\n   * @private\n   */\n  autoUpdateTransform() {\n    if (settings.GLOBAL_AUTO_UPDATE) {\n      this.lastTime = this.lastTime || Date.now();\n      const timeDelta = (Date.now() - this.lastTime) * 1e-3;\n      this.lastTime = Date.now();\n      this.update(timeDelta);\n    } else {\n      this.lastTime = 0;\n    }\n    Container.prototype.updateTransform.call(this);\n  }\n  /**\n   * Create a new sprite to be used with core.RegionAttachment\n   *\n   * @param slot {spine.Slot} The slot to which the attachment is parented\n   * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n   * @private\n   */\n  createSprite(slot, attachment, defName) {\n    let region = attachment.region;\n    if (slot.hackAttachment === attachment) {\n      region = slot.hackRegion;\n    }\n    const texture = region ? region.texture : null;\n    const sprite = this.newSprite(texture);\n    sprite.anchor.set(0.5);\n    if (region) {\n      this.setSpriteRegion(attachment, sprite, attachment.region);\n    }\n    slot.sprites = slot.sprites || {};\n    slot.sprites[defName] = sprite;\n    return sprite;\n  }\n  /**\n   * Creates a Strip from the spine data\n   * @param slot {spine.Slot} The slot to which the attachment is parented\n   * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n   * @private\n   */\n  createMesh(slot, attachment) {\n    let region = attachment.region;\n    if (slot.hackAttachment === attachment) {\n      region = slot.hackRegion;\n      slot.hackAttachment = null;\n      slot.hackRegion = null;\n    }\n    const strip = this.newMesh(\n      region ? region.texture : null,\n      new Float32Array(attachment.regionUVs.length),\n      attachment.regionUVs,\n      new Uint16Array(attachment.triangles),\n      DRAW_MODES.TRIANGLES\n    );\n    if (typeof strip._canvasPadding !== \"undefined\") {\n      strip._canvasPadding = 1.5;\n    }\n    strip.alpha = attachment.color.a;\n    strip.region = attachment.region;\n    if (region) {\n      this.setMeshRegion(attachment, strip, region);\n    }\n    slot.meshes = slot.meshes || {};\n    slot.meshes[attachment.id] = strip;\n    return strip;\n  }\n  // @ts-ignore\n  createGraphics(slot, clip) {\n    const graphics = this.newGraphics();\n    const poly = new Polygon([]);\n    graphics.clear();\n    graphics.beginFill(16777215, 1);\n    graphics.drawPolygon(poly);\n    graphics.renderable = false;\n    slot.currentGraphics = graphics;\n    slot.clippingContainer = this.newContainer();\n    slot.clippingContainer.mask = slot.currentGraphics;\n    return graphics;\n  }\n  updateGraphics(slot, clip) {\n    const geom = slot.currentGraphics.geometry;\n    const vertices = geom.graphicsData[0].shape.points;\n    const n = clip.worldVerticesLength;\n    vertices.length = n;\n    clip.computeWorldVertices(slot, 0, n, vertices, 0, 2);\n    geom.invalidate();\n  }\n  /**\n   * Changes texture in attachment in specific slot.\n   *\n   * PIXI runtime feature, it was made to satisfy our users.\n   *\n   * @param slotIndex {number}\n   * @param [texture = null] {PIXI.Texture} If null, take default (original) texture\n   * @param [size = null] {PIXI.Point} sometimes we need new size for region attachment, you can pass 'texture.orig' there\n   * @returns {boolean} Success flag\n   */\n  hackTextureBySlotIndex(slotIndex, texture = null, size = null) {\n    const slot = this.skeleton.slots[slotIndex];\n    if (!slot) {\n      return false;\n    }\n    const attachment = slot.getAttachment();\n    let region = attachment.region;\n    if (texture) {\n      region = new TextureRegion();\n      region.texture = texture;\n      region.size = size;\n      slot.hackRegion = region;\n      slot.hackAttachment = attachment;\n    } else {\n      slot.hackRegion = null;\n      slot.hackAttachment = null;\n    }\n    if (slot.currentSprite) {\n      this.setSpriteRegion(attachment, slot.currentSprite, region);\n    } else if (slot.currentMesh) {\n      this.setMeshRegion(attachment, slot.currentMesh, region);\n    }\n    return true;\n  }\n  /**\n   * Changes texture in attachment in specific slot.\n   *\n   * PIXI runtime feature, it was made to satisfy our users.\n   *\n   * @param slotName {string}\n   * @param [texture = null] {PIXI.Texture} If null, take default (original) texture\n   * @param [size = null] {PIXI.Point} sometimes we need new size for region attachment, you can pass 'texture.orig' there\n   * @returns {boolean} Success flag\n   */\n  hackTextureBySlotName(slotName, texture = null, size = null) {\n    const index = this.skeleton.findSlotIndex(slotName);\n    if (index == -1) {\n      return false;\n    }\n    return this.hackTextureBySlotIndex(index, texture, size);\n  }\n  /**\n   * Changes texture of an attachment\n   *\n   * PIXI runtime feature, it was made to satisfy our users.\n   *\n   * @param slotName {string}\n   * @param attachmentName {string}\n   * @param [texture = null] {PIXI.Texture} If null, take default (original) texture\n   * @param [size = null] {PIXI.Point} sometimes we need new size for region attachment, you can pass 'texture.orig' there\n   * @returns {boolean} Success flag\n   */\n  hackTextureAttachment(slotName, attachmentName, texture, size = null) {\n    const slotIndex = this.skeleton.findSlotIndex(slotName);\n    const attachment = this.skeleton.getAttachmentByName(slotName, attachmentName);\n    attachment.region.texture = texture;\n    const slot = this.skeleton.slots[slotIndex];\n    if (!slot) {\n      return false;\n    }\n    const currentAttachment = slot.getAttachment();\n    if (attachmentName === currentAttachment.name) {\n      let region = attachment.region;\n      if (texture) {\n        region = new TextureRegion();\n        region.texture = texture;\n        region.size = size;\n        slot.hackRegion = region;\n        slot.hackAttachment = currentAttachment;\n      } else {\n        slot.hackRegion = null;\n        slot.hackAttachment = null;\n      }\n      if (slot.currentSprite && slot.currentSprite.region != region) {\n        this.setSpriteRegion(currentAttachment, slot.currentSprite, region);\n        slot.currentSprite.region = region;\n      } else if (slot.currentMesh && slot.currentMesh.region != region) {\n        this.setMeshRegion(currentAttachment, slot.currentMesh, region);\n      }\n      return true;\n    }\n    return false;\n  }\n  // those methods can be overriden to spawn different classes\n  newContainer() {\n    return new Container();\n  }\n  newSprite(tex) {\n    return new SpineSprite(tex);\n  }\n  newGraphics() {\n    return new Graphics();\n  }\n  newMesh(texture, vertices, uvs, indices, drawMode) {\n    return new SpineMesh(texture, vertices, uvs, indices, drawMode);\n  }\n  transformHack() {\n    return 1;\n  }\n  /**\n   * Hack for pixi-display and pixi-lights. Every attachment name ending with a suffix will be added to different layer\n   * @param nameSuffix\n   * @param group\n   * @param outGroup\n   */\n  hackAttachmentGroups(nameSuffix, group, outGroup) {\n    if (!nameSuffix) {\n      return void 0;\n    }\n    const list_d = [];\n    const list_n = [];\n    for (let i = 0, len = this.skeleton.slots.length; i < len; i++) {\n      const slot = this.skeleton.slots[i];\n      const name = slot.currentSpriteName || slot.currentMeshName || \"\";\n      const target = slot.currentSprite || slot.currentMesh;\n      if (name.endsWith(nameSuffix)) {\n        target.parentGroup = group;\n        list_n.push(target);\n      } else if (outGroup && target) {\n        target.parentGroup = outGroup;\n        list_d.push(target);\n      }\n    }\n    return [list_d, list_n];\n  }\n  destroy(options) {\n    this.debug = null;\n    for (let i = 0, n = this.skeleton.slots.length; i < n; i++) {\n      const slot = this.skeleton.slots[i];\n      for (const name in slot.meshes) {\n        slot.meshes[name].destroy(options);\n      }\n      slot.meshes = null;\n      for (const name in slot.sprites) {\n        slot.sprites[name].destroy(options);\n      }\n      slot.sprites = null;\n    }\n    for (let i = 0, n = this.slotContainers.length; i < n; i++) {\n      this.slotContainers[i].destroy(options);\n    }\n    this.spineData = null;\n    this.skeleton = null;\n    this.slotContainers = null;\n    this.stateData = null;\n    this.state = null;\n    this.tempClipContainers = null;\n    super.destroy(options);\n  }\n};\nlet SpineBase = _SpineBase;\nSpineBase.clippingPolygon = [];\nObject.defineProperty(SpineBase.prototype, \"visible\", {\n  get() {\n    return this._visible;\n  },\n  set(value) {\n    if (value !== this._visible) {\n      this._visible = value;\n      if (value) {\n        this.lastTime = 0;\n      }\n    }\n  }\n});\n\nexport { SpineBase, SpineMesh, SpineSprite };\n//# sourceMappingURL=SpineBase.mjs.map\n"],"names":[],"mappings":"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"}
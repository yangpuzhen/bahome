{"version":3,"file":"AnimationState.js","sources":["../../src/core/AnimationState.ts"],"sourcesContent":["import { IAnimationState, IAnimationStateListener, ITrackEntry, MathUtils, MixBlend, MixDirection, Pool, StringSet, Utils } from '@pixi-spine/base';\nimport { Animation, AttachmentTimeline, DrawOrderTimeline, EventTimeline, RotateTimeline, Timeline } from './Animation';\nimport type { AnimationStateData } from './AnimationStateData';\nimport type { Event } from './Event';\nimport type { Skeleton } from './Skeleton';\nimport type { Slot } from './Slot';\n\n/** Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies\n * multiple animations on top of each other (layering).\n *\n * See [Applying Animations](http://esotericsoftware.com/spine-applying-animations/) in the Spine Runtimes Guide.\n * @public\n * */\nexport class AnimationState implements IAnimationState<AnimationStateData> {\n    private static emptyAnimation(): Animation {\n        if (!_emptyAnimation) _emptyAnimation = new Animation('<empty>', [], 0);\n\n        return _emptyAnimation;\n    }\n\n    /** The AnimationStateData to look up mix durations. */\n    data: AnimationStateData = null;\n\n    /** The list of tracks that currently have animations, which may contain null entries. */\n    tracks = new Array<TrackEntry>();\n\n    /** Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower\n     * or faster. Defaults to 1.\n     *\n     * See TrackEntry {@link TrackEntry#timeScale} for affecting a single animation. */\n    timeScale = 1;\n    unkeyedState = 0;\n\n    events = new Array<Event>();\n    listeners = new Array<AnimationStateListener>();\n    queue = new EventQueue(this);\n    propertyIDs = new StringSet();\n    animationsChanged = false;\n\n    trackEntryPool = new Pool<TrackEntry>(() => new TrackEntry());\n\n    constructor(data: AnimationStateData) {\n        this.data = data;\n    }\n\n    /** Increments each track entry {@link TrackEntry#trackTime()}, setting queued animations as current if needed. */\n    update(delta: number) {\n        delta *= this.timeScale;\n        const tracks = this.tracks;\n\n        for (let i = 0, n = tracks.length; i < n; i++) {\n            const current = tracks[i];\n\n            if (!current) continue;\n\n            current.animationLast = current.nextAnimationLast;\n            current.trackLast = current.nextTrackLast;\n\n            let currentDelta = delta * current.timeScale;\n\n            if (current.delay > 0) {\n                current.delay -= currentDelta;\n                if (current.delay > 0) continue;\n                currentDelta = -current.delay;\n                current.delay = 0;\n            }\n\n            let next = current.next;\n\n            if (next) {\n                // When the next entry's delay is passed, change to the next entry, preserving leftover time.\n                const nextTime = current.trackLast - next.delay;\n\n                if (nextTime >= 0) {\n                    next.delay = 0;\n                    next.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta) * next.timeScale;\n                    current.trackTime += currentDelta;\n                    this.setCurrent(i, next, true);\n                    while (next.mixingFrom) {\n                        next.mixTime += delta;\n                        next = next.mixingFrom;\n                    }\n                    continue;\n                }\n            } else if (current.trackLast >= current.trackEnd && !current.mixingFrom) {\n                tracks[i] = null;\n                this.queue.end(current);\n                this.clearNext(current);\n                continue;\n            }\n            if (current.mixingFrom && this.updateMixingFrom(current, delta)) {\n                // End mixing from entries once all have completed.\n                let from = current.mixingFrom;\n\n                current.mixingFrom = null;\n                if (from) from.mixingTo = null;\n                while (from) {\n                    this.queue.end(from);\n                    from = from.mixingFrom;\n                }\n            }\n\n            current.trackTime += currentDelta;\n        }\n\n        this.queue.drain();\n    }\n\n    /** Returns true when all mixing from entries are complete. */\n    updateMixingFrom(to: TrackEntry, delta: number): boolean {\n        const from = to.mixingFrom;\n\n        if (!from) return true;\n\n        const finished = this.updateMixingFrom(from, delta);\n\n        from.animationLast = from.nextAnimationLast;\n        from.trackLast = from.nextTrackLast;\n\n        // Require mixTime > 0 to ensure the mixing from entry was applied at least once.\n        if (to.mixTime > 0 && to.mixTime >= to.mixDuration) {\n            // Require totalAlpha == 0 to ensure mixing is complete, unless mixDuration == 0 (the transition is a single frame).\n            if (from.totalAlpha == 0 || to.mixDuration == 0) {\n                to.mixingFrom = from.mixingFrom;\n                if (from.mixingFrom) from.mixingFrom.mixingTo = to;\n                to.interruptAlpha = from.interruptAlpha;\n                this.queue.end(from);\n            }\n\n            return finished;\n        }\n\n        from.trackTime += delta * from.timeScale;\n        to.mixTime += delta;\n\n        return false;\n    }\n\n    /** Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the\n     * animation state can be applied to multiple skeletons to pose them identically.\n     * @returns True if any animations were applied. */\n    apply(skeleton: Skeleton): boolean {\n        if (!skeleton) throw new Error('skeleton cannot be null.');\n        if (this.animationsChanged) this._animationsChanged();\n\n        const events = this.events;\n        const tracks = this.tracks;\n        let applied = false;\n\n        for (let i = 0, n = tracks.length; i < n; i++) {\n            const current = tracks[i];\n\n            if (!current || current.delay > 0) continue;\n            applied = true;\n            const blend: MixBlend = i == 0 ? MixBlend.first : current.mixBlend;\n\n            // Apply mixing from entries first.\n            let mix = current.alpha;\n\n            if (current.mixingFrom) mix *= this.applyMixingFrom(current, skeleton, blend);\n            else if (current.trackTime >= current.trackEnd && !current.next) mix = 0;\n\n            // Apply current entry.\n            const animationLast = current.animationLast;\n            const animationTime = current.getAnimationTime();\n            let applyTime = animationTime;\n            let applyEvents = events;\n\n            if (current.reverse) {\n                applyTime = current.animation.duration - applyTime;\n                applyEvents = null;\n            }\n            const timelines = current.animation.timelines;\n            const timelineCount = timelines.length;\n\n            if ((i == 0 && mix == 1) || blend == MixBlend.add) {\n                for (let ii = 0; ii < timelineCount; ii++) {\n                    // Fixes issue #302 on IOS9 where mix, blend sometimes became undefined and caused assets\n                    // to sometimes stop rendering when using color correction, as their RGBA values become NaN.\n                    // (https://github.com/pixijs/pixi-spine/issues/302)\n                    Utils.webkit602BugfixHelper(mix, blend);\n                    const timeline = timelines[ii];\n\n                    if (timeline instanceof AttachmentTimeline) this.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, true);\n                    else timeline.apply(skeleton, animationLast, applyTime, applyEvents, mix, blend, MixDirection.mixIn);\n                }\n            } else {\n                const timelineMode = current.timelineMode;\n\n                const firstFrame = current.timelinesRotation.length != timelineCount << 1;\n\n                if (firstFrame) current.timelinesRotation.length = timelineCount << 1;\n\n                for (let ii = 0; ii < timelineCount; ii++) {\n                    const timeline = timelines[ii];\n                    const timelineBlend = timelineMode[ii] == SUBSEQUENT ? blend : MixBlend.setup;\n\n                    if (timeline instanceof RotateTimeline) {\n                        this.applyRotateTimeline(timeline, skeleton, applyTime, mix, timelineBlend, current.timelinesRotation, ii << 1, firstFrame);\n                    } else if (timeline instanceof AttachmentTimeline) {\n                        this.applyAttachmentTimeline(timeline, skeleton, applyTime, blend, true);\n                    } else {\n                        // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n                        Utils.webkit602BugfixHelper(mix, blend);\n                        timeline.apply(skeleton, animationLast, applyTime, applyEvents, mix, timelineBlend, MixDirection.mixIn);\n                    }\n                }\n            }\n            this.queueEvents(current, animationTime);\n            events.length = 0;\n            current.nextAnimationLast = animationTime;\n            current.nextTrackLast = current.trackTime;\n        }\n\n        // Set slots attachments to the setup pose, if needed. This occurs if an animation that is mixing out sets attachments so\n        // subsequent timelines see any deform, but the subsequent timelines don't set an attachment (eg they are also mixing out or\n        // the time is before the first key).\n        const setupState = this.unkeyedState + SETUP;\n        const slots = skeleton.slots;\n\n        for (let i = 0, n = skeleton.slots.length; i < n; i++) {\n            const slot = slots[i];\n\n            if (slot.attachmentState == setupState) {\n                const attachmentName = slot.data.attachmentName;\n\n                slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\n            }\n        }\n        this.unkeyedState += 2; // Increasing after each use avoids the need to reset attachmentState for every slot.\n\n        this.queue.drain();\n\n        return applied;\n    }\n\n    applyMixingFrom(to: TrackEntry, skeleton: Skeleton, blend: MixBlend) {\n        const from = to.mixingFrom;\n\n        if (from.mixingFrom) this.applyMixingFrom(from, skeleton, blend);\n\n        let mix = 0;\n\n        if (to.mixDuration == 0) {\n            // Single frame mix to undo mixingFrom changes.\n            mix = 1;\n            if (blend == MixBlend.first) blend = MixBlend.setup;\n        } else {\n            mix = to.mixTime / to.mixDuration;\n            if (mix > 1) mix = 1;\n            if (blend != MixBlend.first) blend = from.mixBlend;\n        }\n\n        const attachments = mix < from.attachmentThreshold;\n        const drawOrder = mix < from.drawOrderThreshold;\n        const timelines = from.animation.timelines;\n        const timelineCount = timelines.length;\n        const alphaHold = from.alpha * to.interruptAlpha;\n        const alphaMix = alphaHold * (1 - mix);\n        const animationLast = from.animationLast;\n        const animationTime = from.getAnimationTime();\n        let applyTime = animationTime;\n        let events = null;\n\n        if (from.reverse) applyTime = from.animation.duration - applyTime;\n        else if (mix < from.eventThreshold) events = this.events;\n\n        if (blend == MixBlend.add) {\n            for (let i = 0; i < timelineCount; i++) timelines[i].apply(skeleton, animationLast, applyTime, events, alphaMix, blend, MixDirection.mixOut);\n        } else {\n            const timelineMode = from.timelineMode;\n            const timelineHoldMix = from.timelineHoldMix;\n\n            const firstFrame = from.timelinesRotation.length != timelineCount << 1;\n\n            if (firstFrame) from.timelinesRotation.length = timelineCount << 1;\n\n            from.totalAlpha = 0;\n            for (let i = 0; i < timelineCount; i++) {\n                const timeline = timelines[i];\n                let direction = MixDirection.mixOut;\n                let timelineBlend: MixBlend;\n                let alpha = 0;\n\n                switch (timelineMode[i]) {\n                    case SUBSEQUENT:\n                        if (!drawOrder && timeline instanceof DrawOrderTimeline) continue;\n                        timelineBlend = blend;\n                        alpha = alphaMix;\n                        break;\n                    case FIRST:\n                        timelineBlend = MixBlend.setup;\n                        alpha = alphaMix;\n                        break;\n                    case HOLD_SUBSEQUENT:\n                        timelineBlend = blend;\n                        alpha = alphaHold;\n                        break;\n                    case HOLD_FIRST:\n                        timelineBlend = MixBlend.setup;\n                        alpha = alphaHold;\n                        break;\n                    default:\n                        timelineBlend = MixBlend.setup;\n                        const holdMix = timelineHoldMix[i];\n\n                        alpha = alphaHold * Math.max(0, 1 - holdMix.mixTime / holdMix.mixDuration);\n                        break;\n                }\n                from.totalAlpha += alpha;\n\n                if (timeline instanceof RotateTimeline) this.applyRotateTimeline(timeline, skeleton, applyTime, alpha, timelineBlend, from.timelinesRotation, i << 1, firstFrame);\n                else if (timeline instanceof AttachmentTimeline) this.applyAttachmentTimeline(timeline, skeleton, applyTime, timelineBlend, attachments);\n                else {\n                    // This fixes the WebKit 602 specific issue described at http://esotericsoftware.com/forum/iOS-10-disappearing-graphics-10109\n                    Utils.webkit602BugfixHelper(alpha, blend);\n                    if (drawOrder && timeline instanceof DrawOrderTimeline && timelineBlend == MixBlend.setup) direction = MixDirection.mixIn;\n                    timeline.apply(skeleton, animationLast, applyTime, events, alpha, timelineBlend, direction);\n                }\n            }\n        }\n\n        if (to.mixDuration > 0) this.queueEvents(from, animationTime);\n        this.events.length = 0;\n        from.nextAnimationLast = animationTime;\n        from.nextTrackLast = from.trackTime;\n\n        return mix;\n    }\n\n    applyAttachmentTimeline(timeline: AttachmentTimeline, skeleton: Skeleton, time: number, blend: MixBlend, attachments: boolean) {\n        const slot = skeleton.slots[timeline.slotIndex];\n\n        if (!slot.bone.active) return;\n\n        if (time < timeline.frames[0]) {\n            // Time is before first frame.\n            if (blend == MixBlend.setup || blend == MixBlend.first) this.setAttachment(skeleton, slot, slot.data.attachmentName, attachments);\n        } else this.setAttachment(skeleton, slot, timeline.attachmentNames[Timeline.search1(timeline.frames, time)], attachments);\n\n        // If an attachment wasn't set (ie before the first frame or attachments is false), set the setup attachment later.\n        if (slot.attachmentState <= this.unkeyedState) slot.attachmentState = this.unkeyedState + SETUP;\n    }\n\n    setAttachment(skeleton: Skeleton, slot: Slot, attachmentName: string, attachments: boolean) {\n        slot.setAttachment(!attachmentName ? null : skeleton.getAttachment(slot.data.index, attachmentName));\n        if (attachments) slot.attachmentState = this.unkeyedState + CURRENT;\n    }\n\n    applyRotateTimeline(\n        timeline: RotateTimeline,\n        skeleton: Skeleton,\n        time: number,\n        alpha: number,\n        blend: MixBlend,\n        timelinesRotation: Array<number>,\n        i: number,\n        firstFrame: boolean\n    ) {\n        if (firstFrame) timelinesRotation[i] = 0;\n\n        if (alpha == 1) {\n            timeline.apply(skeleton, 0, time, null, 1, blend, MixDirection.mixIn);\n\n            return;\n        }\n\n        const bone = skeleton.bones[timeline.boneIndex];\n\n        if (!bone.active) return;\n        const frames = timeline.frames;\n        let r1 = 0;\n        let r2 = 0;\n\n        if (time < frames[0]) {\n            switch (blend) {\n                case MixBlend.setup:\n                    bone.rotation = bone.data.rotation;\n                default:\n                    return;\n                case MixBlend.first:\n                    r1 = bone.rotation;\n                    r2 = bone.data.rotation;\n            }\n        } else {\n            r1 = blend == MixBlend.setup ? bone.data.rotation : bone.rotation;\n            r2 = bone.data.rotation + timeline.getCurveValue(time);\n        }\n\n        // Mix between rotations using the direction of the shortest route on the first frame while detecting crosses.\n        let total = 0;\n        let diff = r2 - r1;\n\n        diff -= (16384 - ((16384.499999999996 - diff / 360) | 0)) * 360;\n        if (diff == 0) {\n            total = timelinesRotation[i];\n        } else {\n            let lastTotal = 0;\n            let lastDiff = 0;\n\n            if (firstFrame) {\n                lastTotal = 0;\n                lastDiff = diff;\n            } else {\n                lastTotal = timelinesRotation[i]; // Angle and direction of mix, including loops.\n                lastDiff = timelinesRotation[i + 1]; // Difference between bones.\n            }\n            const current = diff > 0;\n            let dir = lastTotal >= 0;\n            // Detect cross at 0 (not 180).\n\n            if (MathUtils.signum(lastDiff) != MathUtils.signum(diff) && Math.abs(lastDiff) <= 90) {\n                // A cross after a 360 rotation is a loop.\n                if (Math.abs(lastTotal) > 180) lastTotal += 360 * MathUtils.signum(lastTotal);\n                dir = current;\n            }\n            total = diff + lastTotal - (lastTotal % 360); // Store loops as part of lastTotal.\n            if (dir != current) total += 360 * MathUtils.signum(lastTotal);\n            timelinesRotation[i] = total;\n        }\n        timelinesRotation[i + 1] = diff;\n        bone.rotation = r1 + total * alpha;\n    }\n\n    queueEvents(entry: TrackEntry, animationTime: number) {\n        const animationStart = entry.animationStart;\n        const animationEnd = entry.animationEnd;\n        const duration = animationEnd - animationStart;\n        const trackLastWrapped = entry.trackLast % duration;\n\n        // Queue events before complete.\n        const events = this.events;\n        let i = 0;\n        const n = events.length;\n\n        for (; i < n; i++) {\n            const event = events[i];\n\n            if (event.time < trackLastWrapped) break;\n            if (event.time > animationEnd) continue; // Discard events outside animation start/end.\n            this.queue.event(entry, event);\n        }\n\n        // Queue complete if completed a loop iteration or the animation.\n        let complete = false;\n\n        if (entry.loop) complete = duration == 0 || trackLastWrapped > entry.trackTime % duration;\n        else complete = animationTime >= animationEnd && entry.animationLast < animationEnd;\n        if (complete) this.queue.complete(entry);\n\n        // Queue events after complete.\n        for (; i < n; i++) {\n            const event = events[i];\n\n            if (event.time < animationStart) continue; // Discard events outside animation start/end.\n            this.queue.event(entry, event);\n        }\n    }\n\n    /** Removes all animations from all tracks, leaving skeletons in their current pose.\n     *\n     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n     * rather than leaving them in their current pose. */\n    clearTracks() {\n        const oldDrainDisabled = this.queue.drainDisabled;\n\n        this.queue.drainDisabled = true;\n        for (let i = 0, n = this.tracks.length; i < n; i++) this.clearTrack(i);\n        this.tracks.length = 0;\n        this.queue.drainDisabled = oldDrainDisabled;\n        this.queue.drain();\n    }\n\n    /** Removes all animations from the track, leaving skeletons in their current pose.\n     *\n     * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n     * rather than leaving them in their current pose. */\n    clearTrack(trackIndex: number) {\n        if (trackIndex >= this.tracks.length) return;\n        const current = this.tracks[trackIndex];\n\n        if (!current) return;\n\n        this.queue.end(current);\n\n        this.clearNext(current);\n\n        let entry = current;\n\n        while (true) {\n            const from = entry.mixingFrom;\n\n            if (!from) break;\n            this.queue.end(from);\n            entry.mixingFrom = null;\n            entry.mixingTo = null;\n            entry = from;\n        }\n\n        this.tracks[current.trackIndex] = null;\n\n        this.queue.drain();\n    }\n\n    setCurrent(index: number, current: TrackEntry, interrupt: boolean) {\n        const from = this.expandToIndex(index);\n\n        this.tracks[index] = current;\n        current.previous = null;\n\n        if (from) {\n            if (interrupt) this.queue.interrupt(from);\n            current.mixingFrom = from;\n            from.mixingTo = current;\n            current.mixTime = 0;\n\n            // Store the interrupted mix percentage.\n            if (from.mixingFrom && from.mixDuration > 0) current.interruptAlpha *= Math.min(1, from.mixTime / from.mixDuration);\n\n            from.timelinesRotation.length = 0; // Reset rotation for mixing out, in case entry was mixed in.\n        }\n\n        this.queue.start(current);\n    }\n\n    /** Sets an animation by name.\n     *\n     * See {@link #setAnimationWith()}. */\n    setAnimation(trackIndex: number, animationName: string, loop = false) {\n        const animation = this.data.skeletonData.findAnimation(animationName);\n\n        if (!animation) throw new Error(`Animation not found: ${animationName}`);\n\n        return this.setAnimationWith(trackIndex, animation, loop);\n    }\n\n    /** Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never\n     * applied to a skeleton, it is replaced (not mixed from).\n     * @param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n     *           duration. In either case {@link TrackEntry#trackEnd} determines when the track is cleared.\n     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\n    setAnimationWith(trackIndex: number, animation: Animation, loop = false) {\n        if (!animation) throw new Error('animation cannot be null.');\n        let interrupt = true;\n        let current = this.expandToIndex(trackIndex);\n\n        if (current) {\n            if (current.nextTrackLast == -1) {\n                // Don't mix from an entry that was never applied.\n                this.tracks[trackIndex] = current.mixingFrom;\n                this.queue.interrupt(current);\n                this.queue.end(current);\n                this.clearNext(current);\n                current = current.mixingFrom;\n                interrupt = false;\n            } else this.clearNext(current);\n        }\n        const entry = this.trackEntry(trackIndex, animation, loop, current);\n\n        this.setCurrent(trackIndex, entry, interrupt);\n        this.queue.drain();\n\n        return entry;\n    }\n\n    /** Queues an animation by name.\n     *\n     * See {@link #addAnimationWith()}. */\n    addAnimation(trackIndex: number, animationName: string, loop = false, delay = 0) {\n        const animation = this.data.skeletonData.findAnimation(animationName);\n\n        if (!animation) throw new Error(`Animation not found: ${animationName}`);\n\n        return this.addAnimationWith(trackIndex, animation, loop, delay);\n    }\n\n    /** Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is\n     * equivalent to calling {@link #setAnimationWith()}.\n     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n     *           minus any mix duration (from the {@link AnimationStateData}) plus the specified `delay` (ie the mix\n     *           ends at (`delay` = 0) or before (`delay` < 0) the previous track entry duration). If the\n     *           previous entry is looping, its next loop completion is used instead of its duration.\n     * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\n    addAnimationWith(trackIndex: number, animation: Animation, loop = false, delay = 0) {\n        if (!animation) throw new Error('animation cannot be null.');\n\n        let last = this.expandToIndex(trackIndex);\n\n        if (last) {\n            while (last.next) last = last.next;\n        }\n\n        const entry = this.trackEntry(trackIndex, animation, loop, last);\n\n        if (!last) {\n            this.setCurrent(trackIndex, entry, true);\n            this.queue.drain();\n        } else {\n            last.next = entry;\n            entry.previous = last;\n            if (delay <= 0) delay += last.getTrackComplete() - entry.mixDuration;\n        }\n\n        entry.delay = delay;\n\n        return entry;\n    }\n\n    /** Sets an empty animation for a track, discarding any queued animations, and sets the track entry's\n     * {@link TrackEntry#mixduration}. An empty animation has no timelines and serves as a placeholder for mixing in or out.\n     *\n     * Mixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation()},\n     * {@link #setEmptyAnimations()}, or {@link #addEmptyAnimation()}. Mixing to an empty animation causes\n     * the previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation\n     * transition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of\n     * 0 still mixes out over one frame.\n     *\n     * Mixing in is done by first setting an empty animation, then adding an animation using\n     * {@link #addAnimation()} and on the returned track entry, set the\n     * {@link TrackEntry#setMixDuration()}. Mixing from an empty animation causes the new animation to be applied more and\n     * more over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the\n     * setup pose value if no lower tracks key the property to the value keyed in the new animation. */\n    setEmptyAnimation(trackIndex: number, mixDuration = 0) {\n        const entry = this.setAnimationWith(trackIndex, AnimationState.emptyAnimation(), false);\n\n        entry.mixDuration = mixDuration;\n        entry.trackEnd = mixDuration;\n\n        return entry;\n    }\n\n    /** Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's\n     * {@link TrackEntry#mixDuration}. If the track is empty, it is equivalent to calling\n     * {@link #setEmptyAnimation()}.\n     *\n     * See {@link #setEmptyAnimation()}.\n     * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n     *           minus any mix duration plus the specified `delay` (ie the mix ends at (`delay` = 0) or\n     *           before (`delay` < 0) the previous track entry duration). If the previous entry is looping, its next\n     *           loop completion is used instead of its duration.\n     * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept\n     *         after the {@link AnimationStateListener#dispose()} event occurs. */\n    addEmptyAnimation(trackIndex: number, mixDuration = 0, delay = 0) {\n        const entry = this.addAnimationWith(trackIndex, AnimationState.emptyAnimation(), false, delay);\n\n        if (delay <= 0) entry.delay += entry.mixDuration - mixDuration;\n        entry.mixDuration = mixDuration;\n        entry.trackEnd = mixDuration;\n\n        return entry;\n    }\n\n    /** Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix\n     * duration. */\n    setEmptyAnimations(mixDuration = 0) {\n        const oldDrainDisabled = this.queue.drainDisabled;\n\n        this.queue.drainDisabled = true;\n        for (let i = 0, n = this.tracks.length; i < n; i++) {\n            const current = this.tracks[i];\n\n            if (current) this.setEmptyAnimation(current.trackIndex, mixDuration);\n        }\n        this.queue.drainDisabled = oldDrainDisabled;\n        this.queue.drain();\n    }\n\n    expandToIndex(index: number) {\n        if (index < this.tracks.length) return this.tracks[index];\n        Utils.ensureArrayCapacity(this.tracks, index + 1, null);\n        this.tracks.length = index + 1;\n\n        return null;\n    }\n\n    /** @param last May be null. */\n    trackEntry(trackIndex: number, animation: Animation, loop: boolean, last: TrackEntry) {\n        const entry = this.trackEntryPool.obtain();\n\n        entry.reset();\n        entry.trackIndex = trackIndex;\n        entry.animation = animation;\n        entry.loop = loop;\n        entry.holdPrevious = false;\n\n        entry.eventThreshold = 0;\n        entry.attachmentThreshold = 0;\n        entry.drawOrderThreshold = 0;\n\n        entry.animationStart = 0;\n        entry.animationEnd = animation.duration;\n        entry.animationLast = -1;\n        entry.nextAnimationLast = -1;\n\n        entry.delay = 0;\n        entry.trackTime = 0;\n        entry.trackLast = -1;\n        entry.nextTrackLast = -1;\n        entry.trackEnd = Number.MAX_VALUE;\n        entry.timeScale = 1;\n\n        entry.alpha = 1;\n        entry.interruptAlpha = 1;\n        entry.mixTime = 0;\n        entry.mixDuration = !last ? 0 : this.data.getMix(last.animation, animation);\n        entry.mixBlend = MixBlend.replace;\n\n        return entry;\n    }\n\n    /** Removes the {@link TrackEntry#getNext() next entry} and all entries after it for the specified entry. */\n    clearNext(entry: TrackEntry) {\n        let next = entry.next;\n\n        while (next) {\n            this.queue.dispose(next);\n            next = next.next;\n        }\n        entry.next = null;\n    }\n\n    _animationsChanged() {\n        this.animationsChanged = false;\n\n        this.propertyIDs.clear();\n        const tracks = this.tracks;\n\n        for (let i = 0, n = tracks.length; i < n; i++) {\n            let entry = tracks[i];\n\n            if (!entry) continue;\n            while (entry.mixingFrom) entry = entry.mixingFrom;\n            do {\n                if (!entry.mixingTo || entry.mixBlend != MixBlend.add) this.computeHold(entry);\n                entry = entry.mixingTo;\n            } while (entry);\n        }\n    }\n\n    computeHold(entry: TrackEntry) {\n        const to = entry.mixingTo;\n        const timelines = entry.animation.timelines;\n        const timelinesCount = entry.animation.timelines.length;\n        const timelineMode = entry.timelineMode;\n\n        timelineMode.length = timelinesCount;\n        const timelineHoldMix = entry.timelineHoldMix;\n\n        timelineHoldMix.length = 0;\n        const propertyIDs = this.propertyIDs;\n\n        if (to && to.holdPrevious) {\n            for (let i = 0; i < timelinesCount; i++) timelineMode[i] = propertyIDs.addAll(timelines[i].getPropertyIds()) ? HOLD_FIRST : HOLD_SUBSEQUENT;\n\n            return;\n        }\n\n        // eslint-disable-next-line no-restricted-syntax, no-labels\n        outer: for (let i = 0; i < timelinesCount; i++) {\n            const timeline = timelines[i];\n            const ids = timeline.getPropertyIds();\n\n            if (!propertyIDs.addAll(ids)) timelineMode[i] = SUBSEQUENT;\n            else if (\n                !to ||\n                timeline instanceof AttachmentTimeline ||\n                timeline instanceof DrawOrderTimeline ||\n                timeline instanceof EventTimeline ||\n                !to.animation.hasTimeline(ids)\n            ) {\n                timelineMode[i] = FIRST;\n            } else {\n                for (let next = to.mixingTo; next; next = next.mixingTo) {\n                    if (next.animation.hasTimeline(ids)) continue;\n                    if (entry.mixDuration > 0) {\n                        timelineMode[i] = HOLD_MIX;\n                        timelineHoldMix[i] = next;\n                        // eslint-disable-next-line no-labels\n                        continue outer;\n                    }\n                    break;\n                }\n                timelineMode[i] = HOLD_FIRST;\n            }\n        }\n    }\n\n    /** Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing. */\n    getCurrent(trackIndex: number) {\n        if (trackIndex >= this.tracks.length) return null;\n\n        return this.tracks[trackIndex];\n    }\n\n    /** Adds a listener to receive events for all track entries. */\n    addListener(listener: AnimationStateListener) {\n        if (!listener) throw new Error('listener cannot be null.');\n        this.listeners.push(listener);\n    }\n\n    /** Removes the listener added with {@link #addListener()}. */\n    removeListener(listener: AnimationStateListener) {\n        const index = this.listeners.indexOf(listener);\n\n        if (index >= 0) this.listeners.splice(index, 1);\n    }\n\n    /** Removes all listeners added with {@link #addListener()}. */\n    clearListeners() {\n        this.listeners.length = 0;\n    }\n\n    /** Discards all listener notifications that have not yet been delivered. This can be useful to call from an\n     * {@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery\n     * are not wanted because new animations are being set. */\n    clearListenerNotifications() {\n        this.queue.clear();\n    }\n\n    // deprecated stuff\n    onComplete: (trackIndex: number, loopCount: number) => any;\n    onEvent: (trackIndex: number, event: Event) => any;\n    onStart: (trackIndex: number) => any;\n    onEnd: (trackIndex: number) => any;\n\n    private static deprecatedWarning1 = false;\n\n    setAnimationByName(trackIndex: number, animationName: string, loop: boolean) {\n        if (!AnimationState.deprecatedWarning1) {\n            AnimationState.deprecatedWarning1 = true;\n            console.warn('Spine Deprecation Warning: AnimationState.setAnimationByName is deprecated, please use setAnimation from now on.');\n        }\n        this.setAnimation(trackIndex, animationName, loop);\n    }\n\n    private static deprecatedWarning2 = false;\n\n    addAnimationByName(trackIndex: number, animationName: string, loop: boolean, delay: number) {\n        if (!AnimationState.deprecatedWarning2) {\n            AnimationState.deprecatedWarning2 = true;\n            console.warn('Spine Deprecation Warning: AnimationState.addAnimationByName is deprecated, please use addAnimation from now on.');\n        }\n        this.addAnimation(trackIndex, animationName, loop, delay);\n    }\n\n    private static deprecatedWarning3 = false;\n\n    hasAnimation(animationName: string): boolean {\n        const animation = this.data.skeletonData.findAnimation(animationName);\n\n        return animation !== null;\n    }\n\n    hasAnimationByName(animationName: string): boolean {\n        if (!AnimationState.deprecatedWarning3) {\n            AnimationState.deprecatedWarning3 = true;\n            console.warn('Spine Deprecation Warning: AnimationState.hasAnimationByName is deprecated, please use hasAnimation from now on.');\n        }\n\n        return this.hasAnimation(animationName);\n    }\n}\n\n/** Stores settings and other state for the playback of an animation on an {@link AnimationState} track.\n *\n * References to a track entry must not be kept after the {@link AnimationStateListener#dispose()} event occurs.\n * @public\n * */\nexport class TrackEntry implements ITrackEntry {\n    /** The animation to apply for this track entry. */\n    animation: Animation = null;\n\n    previous: TrackEntry = null;\n\n    /** The animation queued to start after this animation, or null. `next` makes up a linked list. */\n    next: TrackEntry = null;\n\n    /** The track entry for the previous animation when mixing from the previous animation to this animation, or null if no\n     * mixing is currently occuring. When mixing from multiple animations, `mixingFrom` makes up a linked list. */\n    mixingFrom: TrackEntry = null;\n\n    /** The track entry for the next animation when mixing from this animation to the next animation, or null if no mixing is\n     * currently occuring. When mixing to multiple animations, `mixingTo` makes up a linked list. */\n    mixingTo: TrackEntry = null;\n\n    /** The listener for events generated by this track entry, or null.\n     *\n     * A track entry returned from {@link AnimationState#setAnimation()} is already the current animation\n     * for the track, so the track entry listener {@link AnimationStateListener#start()} will not be called. */\n    listener: AnimationStateListener = null;\n\n    /** The index of the track where this track entry is either current or queued.\n     *\n     * See {@link AnimationState#getCurrent()}. */\n    trackIndex = 0;\n\n    /** If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n     * duration. */\n    loop = false;\n\n    /** If true, when mixing from the previous animation to this animation, the previous animation is applied as normal instead\n     * of being mixed out.\n     *\n     * When mixing between animations that key the same property, if a lower track also keys that property then the value will\n     * briefly dip toward the lower track value during the mix. This happens because the first animation mixes from 100% to 0%\n     * while the second animation mixes from 0% to 100%. Setting `holdPrevious` to true applies the first animation\n     * at 100% during the mix so the lower track value is overwritten. Such dipping does not occur on the lowest track which\n     * keys the property, only when a higher track also keys the property.\n     *\n     * Snapping will occur if `holdPrevious` is true and this animation does not key all the same properties as the\n     * previous animation. */\n    holdPrevious = false;\n\n    reverse = false;\n\n    /** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\n     * `eventThreshold`, event timelines are applied while this animation is being mixed out. Defaults to 0, so event\n     * timelines are not applied while this animation is being mixed out. */\n    eventThreshold = 0;\n\n    /** When the mix percentage ({@link #mixtime} / {@link #mixDuration}) is less than the\n     * `attachmentThreshold`, attachment timelines are applied while this animation is being mixed out. Defaults to\n     * 0, so attachment timelines are not applied while this animation is being mixed out. */\n    attachmentThreshold = 0;\n\n    /** When the mix percentage ({@link #mixTime} / {@link #mixDuration}) is less than the\n     * `drawOrderThreshold`, draw order timelines are applied while this animation is being mixed out. Defaults to 0,\n     * so draw order timelines are not applied while this animation is being mixed out. */\n    drawOrderThreshold = 0;\n\n    /** Seconds when this animation starts, both initially and after looping. Defaults to 0.\n     *\n     * When changing the `animationStart` time, it often makes sense to set {@link #animationLast} to the same\n     * value to prevent timeline keys before the start time from triggering. */\n    animationStart = 0;\n\n    /** Seconds for the last frame of this animation. Non-looping animations won't play past this time. Looping animations will\n     * loop back to {@link #animationStart} at this time. Defaults to the animation {@link Animation#duration}. */\n    animationEnd = 0;\n\n    /** The time in seconds this animation was last applied. Some timelines use this for one-time triggers. Eg, when this\n     * animation is applied, event timelines will fire all events between the `animationLast` time (exclusive) and\n     * `animationTime` (inclusive). Defaults to -1 to ensure triggers on frame 0 happen the first time this animation\n     * is applied. */\n    animationLast = 0;\n\n    nextAnimationLast = 0;\n\n    /** Seconds to postpone playing the animation. When this track entry is the current track entry, `delay`\n     * postpones incrementing the {@link #trackTime}. When this track entry is queued, `delay` is the time from\n     * the start of the previous animation to when this track entry will become the current track entry (ie when the previous\n     * track entry {@link TrackEntry#trackTime} >= this track entry's `delay`).\n     *\n     * {@link #timeScale} affects the delay. */\n    delay = 0;\n\n    /** Current time in seconds this track entry has been the current track entry. The track time determines\n     * {@link #animationTime}. The track time can be set to start the animation at a time other than 0, without affecting\n     * looping. */\n    trackTime = 0;\n\n    trackLast = 0;\n    nextTrackLast = 0;\n\n    /** The track time in seconds when this animation will be removed from the track. Defaults to the highest possible float\n     * value, meaning the animation will be applied until a new animation is set or the track is cleared. If the track end time\n     * is reached, no other animations are queued for playback, and mixing from any previous animations is complete, then the\n     * properties keyed by the animation are set to the setup pose and the track is cleared.\n     *\n     * It may be desired to use {@link AnimationState#addEmptyAnimation()} rather than have the animation\n     * abruptly cease being applied. */\n    trackEnd = 0;\n\n    /** Multiplier for the delta time when this track entry is updated, causing time for this animation to pass slower or\n     * faster. Defaults to 1.\n     *\n     * {@link #mixTime} is not affected by track entry time scale, so {@link #mixDuration} may need to be adjusted to\n     * match the animation speed.\n     *\n     * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\n     * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, assuming time scale to be 1. If\n     * the time scale is not 1, the delay may need to be adjusted.\n     *\n     * See AnimationState {@link AnimationState#timeScale} for affecting all animations. */\n    timeScale = 0;\n\n    /** Values < 1 mix this animation with the skeleton's current pose (usually the pose resulting from lower tracks). Defaults\n     * to 1, which overwrites the skeleton's current pose with this animation.\n     *\n     * Typically track 0 is used to completely pose the skeleton, then alpha is used on higher tracks. It doesn't make sense to\n     * use alpha on track 0 if the skeleton pose is from the last frame render. */\n    alpha = 0;\n\n    /** Seconds from 0 to the {@link #getMixDuration()} when mixing from the previous animation to this animation. May be\n     * slightly more than `mixDuration` when the mix is complete. */\n    mixTime = 0;\n\n    /** Seconds for mixing from the previous animation to this animation. Defaults to the value provided by AnimationStateData\n     * {@link AnimationStateData#getMix()} based on the animation before this animation (if any).\n     *\n     * A mix duration of 0 still mixes out over one frame to provide the track entry being mixed out a chance to revert the\n     * properties it was animating.\n     *\n     * The `mixDuration` can be set manually rather than use the value from\n     * {@link AnimationStateData#getMix()}. In that case, the `mixDuration` can be set for a new\n     * track entry only before {@link AnimationState#update(float)} is first called.\n     *\n     * When using {@link AnimationState#addAnimation()} with a `delay` <= 0, note the\n     * {@link #delay} is set using the mix duration from the {@link AnimationStateData}, not a mix duration set\n     * afterward. */\n    mixDuration = 0;\n    interruptAlpha = 0;\n    totalAlpha = 0;\n\n    /** Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}, which\n     * replaces the values from the lower tracks with the animation values. {@link MixBlend#add} adds the animation values to\n     * the values from the lower tracks.\n     *\n     * The `mixBlend` can be set for a new track entry only before {@link AnimationState#apply()} is first\n     * called. */\n    mixBlend = MixBlend.replace;\n    timelineMode = new Array<number>();\n    timelineHoldMix = new Array<TrackEntry>();\n    timelinesRotation = new Array<number>();\n\n    reset() {\n        this.next = null;\n        this.previous = null;\n        this.mixingFrom = null;\n        this.mixingTo = null;\n        this.animation = null;\n        this.listener = null;\n        this.timelineMode.length = 0;\n        this.timelineHoldMix.length = 0;\n        this.timelinesRotation.length = 0;\n    }\n\n    /** Uses {@link #trackTime} to compute the `animationTime`, which is between {@link #animationStart}\n     * and {@link #animationEnd}. When the `trackTime` is 0, the `animationTime` is equal to the\n     * `animationStart` time. */\n    getAnimationTime() {\n        if (this.loop) {\n            const duration = this.animationEnd - this.animationStart;\n\n            if (duration == 0) return this.animationStart;\n\n            return (this.trackTime % duration) + this.animationStart;\n        }\n\n        return Math.min(this.trackTime + this.animationStart, this.animationEnd);\n    }\n\n    setAnimationLast(animationLast: number) {\n        this.animationLast = animationLast;\n        this.nextAnimationLast = animationLast;\n    }\n\n    /** Returns true if at least one loop has been completed.\n     *\n     * See {@link AnimationStateListener#complete()}. */\n    isComplete() {\n        return this.trackTime >= this.animationEnd - this.animationStart;\n    }\n\n    /** Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\n     * long way around when using {@link #alpha} and starting animations on other tracks.\n     *\n     * Mixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:\n     * the short way or the long way around. The two rotations likely change over time, so which direction is the short or long\n     * way also changes. If the short way was always chosen, bones would flip to the other side when that direction became the\n     * long way. TrackEntry chooses the short way the first time it is applied and remembers that direction. */\n    resetRotationDirections() {\n        this.timelinesRotation.length = 0;\n    }\n\n    getTrackComplete() {\n        const duration = this.animationEnd - this.animationStart;\n\n        if (duration != 0) {\n            if (this.loop) return duration * (1 + ((this.trackTime / duration) | 0)); // Completion of next loop.\n            if (this.trackTime < duration) return duration; // Before duration.\n        }\n\n        return this.trackTime; // Next update.\n    }\n\n    // deprecated stuff\n    onComplete: (trackIndex: number, loopCount: number) => any;\n    onEvent: (trackIndex: number, event: Event) => any;\n    onStart: (trackIndex: number) => any;\n    onEnd: (trackIndex: number) => any;\n\n    private static deprecatedWarning1: Boolean = false;\n    private static deprecatedWarning2: Boolean = false;\n\n    get time() {\n        if (!TrackEntry.deprecatedWarning1) {\n            TrackEntry.deprecatedWarning1 = true;\n            console.warn('Spine Deprecation Warning: TrackEntry.time is deprecated, please use trackTime from now on.');\n        }\n\n        return this.trackTime;\n    }\n\n    set time(value: number) {\n        if (!TrackEntry.deprecatedWarning1) {\n            TrackEntry.deprecatedWarning1 = true;\n            console.warn('Spine Deprecation Warning: TrackEntry.time is deprecated, please use trackTime from now on.');\n        }\n        this.trackTime = value;\n    }\n\n    get endTime() {\n        if (!TrackEntry.deprecatedWarning2) {\n            TrackEntry.deprecatedWarning2 = true;\n            console.warn('Spine Deprecation Warning: TrackEntry.endTime is deprecated, please use trackEnd from now on.');\n        }\n\n        return this.trackTime;\n    }\n\n    set endTime(value: number) {\n        if (!TrackEntry.deprecatedWarning2) {\n            TrackEntry.deprecatedWarning2 = true;\n            console.warn('Spine Deprecation Warning: TrackEntry.endTime is deprecated, please use trackEnd from now on.');\n        }\n        this.trackTime = value;\n    }\n\n    loopsCount() {\n        return Math.floor(this.trackTime / this.trackEnd);\n    }\n}\n\n/**\n * @public\n */\nexport class EventQueue {\n    objects: Array<any> = [];\n    drainDisabled = false;\n    animState: AnimationState = null;\n\n    constructor(animState: AnimationState) {\n        this.animState = animState;\n    }\n\n    start(entry: TrackEntry) {\n        this.objects.push(EventType.start);\n        this.objects.push(entry);\n        this.animState.animationsChanged = true;\n    }\n\n    interrupt(entry: TrackEntry) {\n        this.objects.push(EventType.interrupt);\n        this.objects.push(entry);\n    }\n\n    end(entry: TrackEntry) {\n        this.objects.push(EventType.end);\n        this.objects.push(entry);\n        this.animState.animationsChanged = true;\n    }\n\n    dispose(entry: TrackEntry) {\n        this.objects.push(EventType.dispose);\n        this.objects.push(entry);\n    }\n\n    complete(entry: TrackEntry) {\n        this.objects.push(EventType.complete);\n        this.objects.push(entry);\n    }\n\n    event(entry: TrackEntry, event: Event) {\n        this.objects.push(EventType.event);\n        this.objects.push(entry);\n        this.objects.push(event);\n    }\n\n    drain() {\n        if (this.drainDisabled) return;\n        this.drainDisabled = true;\n\n        const objects = this.objects;\n        const listeners = this.animState.listeners;\n\n        for (let i = 0; i < objects.length; i += 2) {\n            const type = objects[i] as EventType;\n            const entry = objects[i + 1] as TrackEntry;\n\n            switch (type) {\n                case EventType.start:\n                    if (entry.listener && entry.listener.start) entry.listener.start(entry);\n                    for (let ii = 0; ii < listeners.length; ii++) if (listeners[ii].start) listeners[ii].start(entry);\n                    break;\n                case EventType.interrupt:\n                    if (entry.listener && entry.listener.interrupt) entry.listener.interrupt(entry);\n                    for (let ii = 0; ii < listeners.length; ii++) if (listeners[ii].interrupt) listeners[ii].interrupt(entry);\n                    break;\n                case EventType.end:\n                    if (entry.listener && entry.listener.end) entry.listener.end(entry);\n                    for (let ii = 0; ii < listeners.length; ii++) if (listeners[ii].end) listeners[ii].end(entry);\n                // Fall through.\n                case EventType.dispose:\n                    if (entry.listener && entry.listener.dispose) entry.listener.dispose(entry);\n                    for (let ii = 0; ii < listeners.length; ii++) if (listeners[ii].dispose) listeners[ii].dispose(entry);\n                    this.animState.trackEntryPool.free(entry);\n                    break;\n                case EventType.complete:\n                    if (entry.listener && entry.listener.complete) entry.listener.complete(entry);\n                    for (let ii = 0; ii < listeners.length; ii++) if (listeners[ii].complete) listeners[ii].complete(entry);\n                    break;\n                case EventType.event:\n                    const event = objects[i++ + 2] as Event;\n\n                    if (entry.listener && entry.listener.event) entry.listener.event(entry, event);\n                    for (let ii = 0; ii < listeners.length; ii++) if (listeners[ii].event) listeners[ii].event(entry, event);\n                    break;\n            }\n        }\n        this.clear();\n\n        this.drainDisabled = false;\n    }\n\n    clear() {\n        this.objects.length = 0;\n    }\n}\n\n/**\n * @public\n */\nexport enum EventType {\n    start,\n    interrupt,\n    end,\n    dispose,\n    complete,\n    event,\n}\n\n/** The interface to implement for receiving TrackEntry events. It is always safe to call AnimationState methods when receiving\n * events.\n *\n * See TrackEntry {@link TrackEntry#listener} and AnimationState\n * {@link AnimationState#addListener()}.\n * @public\n * */\nexport interface AnimationStateListener extends IAnimationStateListener {\n    /** Invoked when this entry has been set as the current entry. */\n    start?(entry: TrackEntry): void;\n\n    /** Invoked when another entry has replaced this entry as the current entry. This entry may continue being applied for\n     * mixing. */\n    interrupt?(entry: TrackEntry): void;\n\n    /** Invoked when this entry is no longer the current entry and will never be applied again. */\n    end?(entry: TrackEntry): void;\n\n    /** Invoked when this entry will be disposed. This may occur without the entry ever being set as the current entry.\n     * References to the entry should not be kept after dispose is called, as it may be destroyed or reused. */\n    dispose?(entry: TrackEntry): void;\n\n    /** Invoked every time this entry's animation completes a loop. */\n    complete?(entry: TrackEntry): void;\n\n    /** Invoked when this entry's animation triggers an event. */\n    event?(entry: TrackEntry, event: Event): void;\n}\n\n/**\n * @public\n */\nexport abstract class AnimationStateAdapter implements AnimationStateListener {\n    start(entry: TrackEntry) {}\n\n    interrupt(entry: TrackEntry) {}\n\n    end(entry: TrackEntry) {}\n\n    dispose(entry: TrackEntry) {}\n\n    complete(entry: TrackEntry) {}\n\n    event(entry: TrackEntry, event: Event) {}\n}\n\n/** 1. A previously applied timeline has set this property.\n *\n * Result: Mix from the current pose to the timeline pose. */\nconst SUBSEQUENT = 0;\n/** 1. This is the first timeline to set this property.\n * 2. The next track entry applied after this one does not have a timeline to set this property.\n *\n * Result: Mix from the setup pose to the timeline pose. */\nconst FIRST = 1;\n/** 1) A previously applied timeline has set this property.<br>\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\n * Result: Mix from the current pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading\n * animations that key the same property. A subsequent timeline will set this property using a mix. */\nconst HOLD_SUBSEQUENT = 2;\n/** 1) This is the first timeline to set this property.<br>\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\n * Result: Mix from the setup pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading animations\n * that key the same property. A subsequent timeline will set this property using a mix. */\nconst HOLD_FIRST = 3;\n/** 1. This is the first timeline to set this property.\n * 2. The next track entry to be applied does have a timeline to set this property.\n * 3. The next track entry after that one does have a timeline to set this property.\n * 4. timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.\n *\n * Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than\n * 2 track entries in a row have a timeline that sets the same property.\n *\n * Eg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid\n * \"dipping\" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A\n * (which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into\n * place. */\nconst HOLD_MIX = 4;\n\nconst SETUP = 1;\nconst CURRENT = 2;\n\nlet _emptyAnimation: Animation = null;\n"],"names":["StringSet","Pool","Animation","MixBlend","Utils","AttachmentTimeline","MixDirection","RotateTimeline","DrawOrderTimeline","Timeline","MathUtils","EventTimeline","EventType"],"mappings":"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"}